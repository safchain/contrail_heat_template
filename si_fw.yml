heat_template_version: 2013-05-23

description: >
  HOT template to Create a service instance
  Creates a network policy for applying service between two VNs created before.
  Attach the network policy to two virtual networks

parameters:
  left:
    type: string
    description: Uuid of the left network
  right:
    type: string
    description: Uuid of the right network
  instance_name:
    type: string
    description: service instance name

resources:
  service_instance:
    type: OS::Contrail::ServiceInstance
    depends_on: [ service_vm ]
    properties:
      name: { get_param: instance_name }
      service_template: "default-domain:fw-template"
      interface_list: [
          {
              virtual_network: {get_param: left}
          },
          {
              virtual_network: {get_param: right}
          }
      ]
      virtual_machines: [{get_resource: service_vm}]

  service_policy:
    type: OS::Contrail::NetworkPolicy
    depends_on: [ service_instance ]
    properties:
      name: "fw-policy"
      entries:
        policy_rule: [
              { 
                "direction": "<>", 
                "protocol": "any", 
                "src_ports": [{"start_port": 0, "end_port": 65535}],
                "dst_ports": [{"start_port": 0, "end_port": 65535}],
                "src_addresses": [{"virtual_network": {get_param: left}}], 
                "dst_addresses": [{"virtual_network": {get_param: right}}], 
                "action_list": {"apply_service": [{get_resource: service_instance}]}
              } 
        ]

  service_policy_attach_left:
    type: OS::Contrail::AttachPolicy
    depends_on: [ service_policy ]
    properties:
      network: { get_param: left }
      policy: { get_attr: [service_policy, fq_name] }

  service_policy_attach_right:
    type: OS::Contrail::AttachPolicy
    depends_on: [ service_policy ]
    properties:
      network: { get_param: right }
      policy: { get_attr: [service_policy, fq_name] }

  service_vm:
    type: "OS::Nova::Server"
    properties:
      name: "fw-vm"
      image: 'cirros-0.3.2-x86_64-uec'
      flavor: m1.tiny
      networks:
          - network: {get_param: left}
          - network: {get_param: right}
      user_data_format: RAW
      user_data: |
        #!/bin/sh
        while [ 1 ] ; do echo $((13**99)) 1>/dev/null 2>&1; done

outputs:
  service_instance_fq_name:
    description: FQ name of the service template
    value: { get_attr: [ service_instance, fq_name] }
  service_instance_vms:
    description: List of service VMs
    value: { get_attr: [ service_instance, virtual_machines] }
  num_active_service_instance_vms:
    description: Number of active service VMs
    value: { get_attr: [ service_instance, active_service_vms] }
